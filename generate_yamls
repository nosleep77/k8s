
Generate YAML file from kubectl
https://www.reddit.com/r/kubernetes/comments/eu97sn/yaml_generator/

## generate pod yaml with service
kubectl run nginx --image nginx --port 80 --expose --dry-run -o yaml

## generate deployment yaml
kubectl create deployment nginx --image=nginx --dry-run -o yaml

## generate service yaml
kubectl expose deployment nginx --port=80 --target-port=80 --dry-run -o yaml

## getting the yaml from an existing deployment
kubectl get deployment -n default nginx -o yaml

## generate pod yaml
kubectl run nginx --image=nginx --dry-run -o yaml
kubectl run nginx --image=nginx --dry-run=client -o yaml


I also like the --export, because it removes a bunch of stuff from the existing deployment 
which you might not need if you just want the plain yaml. But it's deprecated and being removed in newer versions. 
However, it works great right now and I recommend trying it out.
"kubectl get deployment -n default nginx -o yaml --export"
"kubectl get deployment -n default nginx -o yaml --export > nginx-deployment.yaml"




Create an NGINX Pod
kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
k run nginx --image nginx --expose --port 80 --dry-run=client
kubectl run nginx --image=nginx --dry-run=client -o yaml

Create a deployment
kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

Save it to a file, make necessary changes to the file (for example, adding more replicas) and then create the deployment.
kubectl create -f nginx-deployment.yaml
OR
In k8s version 1.19+, we can specify the --replicas option to create a deployment with 4 replicas.
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml

Kubectl set image deployment nginx nginx=nginx:1.18


Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod redis --port=6379 --target-port=8080 --name redis-service \
--dry-run=client -o yaml
(This will automatically use the pod's labels as selectors)
Or
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml (This will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service)

Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml
(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)
Or
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml
(This will not use the pods labels as selectors)
Both the above commands have their own challenges. While one of it cannot accept a selector the other cannot accept a node port. I would recommend going with the kubectl expose command. If you need to specify a node port, generate a definition file using the same command and manually input the nodeport before creating the service.







